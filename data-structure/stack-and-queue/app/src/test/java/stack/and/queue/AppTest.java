/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {
    @Test public void testQueueEnqueue() {
        Queue classUnderTest = new Queue();
        classUnderTest.enqueue(1);
        assertEquals("enqueue into a queue", "Queue{front=Node{value=1, next=null}, Rear=Node{value=1, next=null}}",classUnderTest.toString());
        classUnderTest.enqueue(2);
        assertEquals("enqueue into a queue", "Queue{front=Node{value=1, next=Node{value=2, next=null}}, Rear=Node{value=2, next=null}}",classUnderTest.toString());
    }

    @Test public void testQueueDequeue() {
        Queue classUnderTest = new Queue();
        classUnderTest.enqueue(1);
        classUnderTest.enqueue(2);
        assertEquals("Dequeue first item in a queue", "Node{value=1, next=null}",classUnderTest.dequeue().toString());
        assertEquals("Queue after dequeue","Queue{front=Node{value=2, next=null}, Rear=Node{value=2, next=null}}",classUnderTest.toString());
        assertEquals("dequeue last item in a queue","Node{value=2, next=null}",classUnderTest.dequeue().toString());
    }

    @Test public void testQueuePeek() {
        Queue classUnderTest = new Queue();
        classUnderTest.enqueue(1);
        classUnderTest.enqueue(2);
        assertEquals("Peek first item in a queue", 1,classUnderTest.peek());
    }

    @Test public void testQueueIsEmpty() {
        Queue classUnderTest = new Queue();
        assertEquals("Test empty queue using isEmpty", true,classUnderTest.isEmpty());
        classUnderTest.enqueue(1);
        assertEquals("Test not empty queue using isEmpty", false,classUnderTest.isEmpty());
    }

    @Test public void testQueueInstantiateEmptyQueue() {
        Queue classUnderTest = new Queue();
        assertEquals("Instantiate Empty Queue",true ,classUnderTest instanceof Queue);
    }

    @Test public void testQueuePopOrPeekEmptyQueue() {
        Queue classUnderTest = new Queue();
        assertEquals("Calling pop on empty queue raises exception","java.lang.NullPointerException" ,classUnderTest.dequeue().toString());
        assertEquals("Calling peek on empty queue raises exception","java.lang.NullPointerException" ,classUnderTest.peek().toString());
    }

    @Test public void testStackPush() {
        Stack classUnderTest = new Stack();
        classUnderTest.push(1);
        assertEquals("Stack after push value","Stack{top=Node{value=1, next=null}}" ,classUnderTest.toString());
        classUnderTest.push(2);
        assertEquals("Stack after push value","Stack{top=Node{value=2, next=Node{value=1, next=null}}}" ,classUnderTest.toString());
    }

    @Test public void testStackPop() {
        Stack classUnderTest = new Stack();
        classUnderTest.push(1);
        classUnderTest.push(2);
        assertEquals("Stack pop last node","Node{value=2, next=null}" ,classUnderTest.pop().toString());
        assertEquals("Stack after pop the last node","Stack{top=Node{value=1, next=null}}" ,classUnderTest.toString());
        assertEquals("Stack pop last node","Node{value=1, next=null}" ,classUnderTest.pop().toString());
        assertEquals("empty a stack after multiple pops","Stack{top=null}" ,classUnderTest.toString());
        assertEquals("Stack pop Empty Stack","java.lang.NullPointerException" ,classUnderTest.pop().toString());
    }


    @Test public void testStackPeek() {
        Stack classUnderTest = new Stack(1);
        assertEquals("Stack peek last node value",1 ,classUnderTest.peek());
    }

    @Test public void testStackInstantiateEmptyStack() {
        Stack classUnderTest = new Stack();
        assertEquals("Instantiate Empty Stack",true ,classUnderTest instanceof Stack);
    }

    @Test public void testStackPopOrPeekEmptyStack() {
        Stack classUnderTest = new Stack();
        assertEquals("Calling pop on empty stack raises exception","java.lang.NullPointerException" ,classUnderTest.pop().toString());
        assertEquals("Calling peek on empty stack raises exception","java.lang.NullPointerException" ,classUnderTest.peek().toString());
    }
}
